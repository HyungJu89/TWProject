<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jwi.work.channel.mapper.SearchMapper">

<resultMap type="com.jwi.work.channel.dto.postDto.PostDto" id="postResultMap">
	<id property="postKey" column="postKey"/>
	<result property="nickName" column="P_nickName" />
	<result property="content" column="P_content" />
	<result property="image" column="P_image" />
	<result property="state" column="P_state" />
	<result property="likeCount" column="P_likeCount" />
	<result property="commentCount" column="P_commentCount" />
	<result property="createdAt" column="P_createdAt" />
	<result property="updatedAt" column="P_updatedAt" />
	<result property="like" column="isLike"/>
	<result property="myPost" column="myPost"/>
	<association property="postChannel" javaType="com.jwi.work.channel.dto.postDto.PostChannelDto" resultMap="postChannelResultMap"/>
</resultMap>

<resultMap type="com.jwi.work.channel.dto.postDto.PostChannelDto" id="postChannelResultMap">
		<id property="channelKey" column="channelKey"/>
		<result property="id" column="PC_id"/>
		<result property="imageUrl" column="PC_imageUrl"/>
		<result property="name" column="PC_name"/>
</resultMap>

	<!-- 채널 검색시 -->

	<select id="searchChannelCount" parameterType="map" resultType="int">
		SELECT COUNT(*) FROM channel WHERE name LIKE
		CONCAT('%',#{search},'%')
	</select>

	<select id="searchChannelList" parameterType="map" resultType="com.jwi.work.channel.dto.channelDto.ChannelDto">
		SELECT
			channel.channelKey,
			channel.id,
			channel.name,
			channel.followerCount,
			channel.imageUrl,
			COALESCE(COUNT(favorites.channelKey), 0) AS favoriteCount ,
			<!-- 단순하게 case 문으로 생각하면 됨 CASE WHEN EXISTS 안의 값이  특정 조건을 만족하는 데이터가 있는지-->
			<!--  EXISTS 는 서브쿼리 안에 행이 존재하면 트루가 반환됨. -->
        	CASE 
            	WHEN EXISTS(
        			SELECT  
            			1 
        			FROM 
        		    	favorites f
		        	JOIN
            			userConnection uc ON f.userKey = uc.userKey
        			WHERE 
	            		f.channelKey = channel.channelKey 
	            		AND uc.sessionId = #{sessionId}
    				) THEN TRUE
    			ELSE FALSE
        	END AS isFavorite
		FROM
			channel
		LEFT JOIN
			favorites ON channel.channelKey = favorites.channelKey
		WHERE 
			channel.name LIKE CONCAT('%',#{search},'%')
		GROUP BY
        	channel.channelKey
		LIMIT
			#{offset},#{limit}
	</select>

	<!-- 개시글 검색시 -->
	<select id="searchPostCount" parameterType="map" resultType="int">
		SELECT COUNT(*) FROM post WHERE content LIKE
		CONCAT('%',#{search},'%')  AND state = 'common';
	</select>
	
	<select id="searchPostList" parameterType="map" resultMap="postResultMap">
		SELECT 
		<!-- select 하나하나 해준이유 = 유저key가 못빠져오게하려고 -->
			post.postKey AS postKey,
			post.content AS P_content,
			post.image AS P_image,
			post.state AS P_state,
			post.createdAt AS P_createdAt,
			post.updatedAt AS P_updatedAt,
						<!-- if null 은 오류 방지를 위해 null일때 0을 대신출력 -->
			IFNULL(commentSummary.totalCommentCount, 0) AS  P_commentCount,
			IFNULL(likeSummary.likeCount, 0) AS P_likeCount,
			user.nickName AS P_nickName,
			
					<!-- AS 는 왼쪽에 있는 칼럼의 이름을 오른쪽껄로 바꾸겠다 -->
			channel.channelKey AS channelKey,
			channel.id AS PC_id,
			channel.imageUrl AS PC_imageUrl,
			channel.name AS PC_name,

        	CASE 
            	WHEN EXISTS(
            		SELECT  
            			1 
            		FROM 
            			`like` l
            		JOIN
            			userConnection uc ON l.userKey = uc.userKey
            		WHERE 
            			l.postKey = post.postKey 
            			AND uc.sessionId = #{sessionId}
            	) THEN TRUE
            	ELSE FALSE
        	END AS isLike,
        	
			CASE
				WHEN EXISTS(
					SELECT
						1
					FROM
						`userConnection` uc
					WHERE
						uc.userKey = post.userKey
						AND uc.sessionId = #{sessionId}

				) THEN TRUE
				ELSE FALSE
				END AS myPost
				
				
		FROM 
			<!-- post 테이블이 메인 -->
			post 
		LEFT JOIN
			<!-- channel 테이블에서 post.channelKey 와 동일한 channelKey 를 가지고있는 결과에 추가해준다. -->
			channel ON post.channelKey = channel.channelKey
		LEFT JOIN
			<!-- 서브쿼리 : 게시글 좋아요 숫자를 뽑기위해 필요-->
			<!-- like 테이블에서 postKey 를 선택하고 postKey의 갯수를 세는 기능. 결과는 postKey별로 그룹화해서 각 post에 대한 좋아요 갯수를 반환함-->
			<!-- 서브쿼리로 그룹화 시킨 값중 post.postKey와 동일한 postKey를 가진행을 결과에 추가해준다 -->
			(SELECT
				`like`.postKey,
				COUNT(DISTINCT `like`.postKey) AS likeCount
			FROM
				`like`
			GROUP BY
				`like`.postKey
			) AS likeSummary ON post.postKey = likeSummary.postKey
		LEFT JOIN
			<!-- post.userKey와 동일한 user.userKey 를 가진 행을 결과에 추가해준다  -->
			user ON post.userKey = user.userKey
		LEFT JOIN
			<!-- 서브쿼리 : 댓글 숫자를 뽑기위해 필요 -->
			<!-- comment 테이블에서 postKey를 선택하고 postKey의 갯수를 세는 기능, 결과는 postKey별로 그룹화해서 각 post에 댓글 갯수를 반환함 -->
			<!-- 서브 쿼리로 그룹화 시킨 값중 post.postKey 와 동일한 postKey를 가진 행을 결과에 추가해준다 -->
   	     	(SELECT 
        		comment.postKey, 
        		COUNT(DISTINCT comment.commentKey) + IFNULL(SUM(reply.replyKey IS NOT NULL), 0) AS totalCommentCount
     		FROM 
        		comment
     		LEFT JOIN 
        		reply ON comment.commentKey = reply.commentKey
     		GROUP BY 
        		comment.postKey
        ) AS commentSummary ON post.postKey = commentSummary.postKey
		WHERE 
			<!-- 검색한 단어를 조건에 추가 + post가 common 인 상태만 출력 -->
			post.content LIKE CONCAT('%',#{search},'%')  AND post.state = 'common'
		ORDER BY
			<!-- 생성시간의 내림차순으로 검사한다 -->
        	post.createdAt DESC
		LIMIT	
			<!-- 페이징처리 -->
			#{offset},#{limit}
	</select>
	 
	
	<select id="searchRecommendedCount" parameterType="map"  resultType="int">
			SELECT COUNT(*) FROM post WHERE state = 'common';
	</select>
	
	<!-- 좋아요 순으로 정렬된 게시글 -->
		<select id="searchRecommended" parameterType="map"  resultMap="postResultMap">
		SELECT 
			post.postKey AS postKey,
			post.content AS P_content,
			post.image AS P_image,
			post.state AS P_state,
			post.createdAt AS P_createdAt,
			post.updatedAt AS P_updatedAt,
			
			IFNULL(commentSummary.totalCommentCount, 0) AS  P_commentCount,
			IFNULL(likeSummary.likeCount, 0) AS P_likeCount,
			user.nickName AS P_nickName,
			
			
			channel.channelKey AS channelKey,
			channel.id AS PC_id,
			channel.imageUrl AS PC_imageUrl,
			channel.name AS PC_name,

        	CASE 
            	WHEN EXISTS(
            		SELECT  
            			1 
            		FROM 
            			`like` l
            		JOIN
            			userConnection uc ON l.userKey = uc.userKey
            		WHERE 
            			l.postKey = post.postKey 
            			AND uc.sessionId = #{sessionId}
            	) THEN TRUE
            	ELSE FALSE
        	END AS isLike,
        	
			CASE
				WHEN EXISTS(
					SELECT
						1
					FROM
						`userConnection` uc
					WHERE
						uc.userKey = post.userKey
						AND uc.sessionId = #{sessionId}

				) THEN TRUE
			ELSE FALSE
		END AS myPost
        	
		FROM 
			post 
		LEFT JOIN
		<!-- channel 테이블에서 post.channelKey 와 동일한 channelKey 를 가지고있는 결과에 추가해준다. -->
			channel ON post.channelKey = channel.channelKey
		LEFT JOIN
			<!-- 서브쿼리 : 게시글 좋아요 숫자를 뽑기위해 필요-->
			<!-- like 테이블에서 postKey 를 선택하고 postKey의 갯수를 세는 기능. 결과는 postKey별로 그룹화해서 각 post에 대한 좋아요 갯수를 반환함-->
			<!-- 서브쿼리로 그룹화 시킨 값중 같은 postKey를 가진 행을 결과에 추가해준다 -->
			(SELECT
				`like`.postKey,
				COUNT(`like`.likeKey) AS likeCount
			FROM
				`like`
			WHERE
				DATE_FORMAT(`like`.createdAt, '%Y-%m-%d') = DATE_FORMAT(NOW(), '%Y-%m-%d')
			GROUP BY
				`like`.postKey
			) AS likeSummary ON post.postKey = likeSummary.postKey
		LEFT JOIN
			<!-- post.userKey와 동일한 user.userKey 를 가진 행을 오른쪽에 이어붙인다  -->
			user ON post.userKey = user.userKey 
		LEFT JOIN
			<!-- 서브쿼리 : 댓글 숫자를 뽑기위해 필요 -->
			<!-- comment 테이블에서 postKey를 선택하고 postKey의 갯수를 세는 기능, 결과는 postKey별로 그룹화해서 각 post에 댓글 갯수를 반환함 -->
			<!-- 서브 쿼리로 그룹화 시킨 값중  같은 postKey를 가진 행을 결과에 추가해준다 -->
        	(SELECT 
        		comment.postKey, 
        		COUNT(DISTINCT comment.commentKey) + IFNULL(SUM(reply.replyKey IS NOT NULL), 0) AS totalCommentCount
     		FROM 
        		comment
     		LEFT JOIN 
        		reply ON comment.commentKey = reply.commentKey
     		GROUP BY 
        		comment.postKey
        ) AS commentSummary ON post.postKey = commentSummary.postKey
		WHERE 
		<!-- state 가 common 인 게시글만 출력 -->
			post.state = 'common'
		ORDER BY
			<!-- 좋아요 순으로 내림차순하고 좋아요가 똑같을땐 생성시간으로 내림차순 -->
		 	likeSummary.likeCount DESC,
        	post.createdAt DESC
		LIMIT	
			<!-- 페이징처리 -->
			#{offset},#{limit}
	</select>
	
	<select id="searchFavoritesPostCount" parameterType="String" resultType="int">
		SELECT 
			COUNT(*) 
		FROM 
			post 
		JOIN
		<!-- favorites 테이블에 channelKey 값과 일치하는 행만 결과에 포함해준다. -->
			favorites ON post.channelKey = favorites.channelKey
		JOIN
		<!-- user테이블에 userKey값이 일치하는 행만 결과에 포함해준다. -->
			user ON favorites.userKey = user.userKey 
		JOIN
		<!-- userConnection 테이블에서 sessionId 의 값과 userKey 값이 일치하는 행만 결과에 포함해준다. -->
			userConnection ON user.userKey = userConnection.userKey AND user.sessionId = #{sessionId}
		WHERE 
			post.state = 'common'
			AND userConnection.sessionId = #{sessionId}
	</select>

<!-- 팔로우한 게시판의 게시글 출력--> 
	<select id="searchFavoritesPost" parameterType="map"  resultMap="postResultMap">
		SELECT 
			post.postKey AS postKey,
			post.content AS P_content,
			post.image AS P_image,
			post.state AS P_state,
			post.createdAt AS P_createdAt,
			post.updatedAt AS P_updatedAt,
			
			IFNULL(commentSummary.totalCommentCount, 0) AS  P_commentCount,
			IFNULL(likeSummary.likeCount, 0) AS P_likeCount,
			user.nickName AS P_nickName,
			
			
			channel.channelKey AS channelKey,
			channel.id AS PC_id,
			channel.imageUrl AS PC_imageUrl,
			channel.name AS PC_name,
			
        	CASE 
            	WHEN EXISTS(
            		SELECT  
            			1 
            		FROM 
            			`like` l
            		JOIN
            			userConnection uc ON l.userKey = uc.userKey
            		WHERE 
            			l.postKey = post.postKey 
            			AND uc.sessionId = #{sessionId}
            	) THEN TRUE
            	ELSE FALSE
        	END AS isLike,
        	
			CASE
				WHEN EXISTS(
					SELECT
						1
					FROM
						`userConnection` uc
					WHERE
						uc.userKey = post.userKey
						AND uc.sessionId = #{sessionId}

				) THEN TRUE
				ELSE FALSE
				END AS myPost

		FROM 
			post 
		JOIN
		<!-- favorites 테이블에 channelKey 값과 일치하는 행만 결과에 포함해준다. -->
			favorites ON post.channelKey = favorites.channelKey
		JOIN
		<!-- user테이블에 userKey값이 일치하는 행만 결과에 포함해준다. -->
			user ON favorites.userKey = user.userKey 
		JOIN
		<!-- userConnection 테이블에서 sessionId 의 값과 userKey 값이 일치하는 행만 결과에 포함해준다. -->
			userConnection ON user.userKey = userConnection.userKey AND user.sessionId = #{sessionId}
		LEFT JOIN
		<!-- channel 테이블에 channelKey 값이 일치하는 행을 결과에 추가해준다 -->
			channel ON post.channelKey = channel.channelKey
		LEFT JOIN
			<!-- 서브쿼리 : 게시글 좋아요 숫자를 뽑기위해 필요-->
			<!-- like 테이블에서 postKey 를 선택하고 postKey의 갯수를 세는 기능. 결과는 postKey별로 그룹화해서 각 post에 대한 좋아요 갯수를 반환함-->
			<!-- 서브쿼리로 그룹화 시킨 값중 같은 postKey를 가진 행을 결과에 추가해준다 -->
			(SELECT
				`like`.postKey,
				COUNT(`like`.likeKey) AS likeCount
			FROM
				`like`
			GROUP BY
				`like`.postKey
			) AS likeSummary ON post.postKey = likeSummary.postKey
		LEFT JOIN
			<!-- 서브쿼리 : 댓글 숫자를 뽑기위해 필요 -->
			<!-- comment 테이블에서 postKey를 선택하고 postKey의 갯수를 세는 기능, 결과는 postKey별로 그룹화해서 각 post에 댓글 갯수를 반환함 -->
			<!-- 서브 쿼리로 그룹화 시킨 값중 같은 postKey를 가진 행을 결과에 추가해준다  -->
        	(SELECT 
        		comment.postKey, 
        		COUNT(DISTINCT comment.commentKey) + IFNULL(SUM(reply.replyKey IS NOT NULL), 0) AS totalCommentCount
     		FROM 
        		comment
     		LEFT JOIN 
        		reply ON comment.commentKey = reply.commentKey
     		GROUP BY 
        		comment.postKey
        ) AS commentSummary ON post.postKey = commentSummary.postKey
		WHERE 
			post.state = 'common'
		ORDER BY
			<!-- 좋아요 순으로 내림차순하고 좋아요가 똑같을땐 생성시간으로 내림차순 -->
		 	likeSummary.likeCount DESC,
        	post.createdAt DESC
		LIMIT	
			<!-- 페이징처리 -->
			#{offset},#{limit}
	</select>
	
	
	
	
	
	
	
	
	<select id="searchAllTopicCount" parameterType="map" resultType="int">
		SELECT COUNT(*) FROM post WHERE state = 'common';
	</select>
	
	
	
			<select id="searchAllTopic" parameterType="map" resultMap="postResultMap">
		SELECT 	
			post.postKey AS postKey,
			post.content AS P_content,
			post.image AS P_image,
			post.state AS P_state,
			post.createdAt AS P_createdAt,
			post.updatedAt AS P_updatedAt,
			
			IFNULL(commentSummary.totalCommentCount, 0) AS  P_commentCount,
			IFNULL(likeSummary.likeCount, 0) AS P_likeCount,
			user.nickName AS P_nickName,
			
			
			channel.channelKey AS channelKey,
			channel.id AS PC_id,
			channel.imageUrl AS PC_imageUrl,
			channel.name AS PC_name,
			
        	CASE 
            	WHEN EXISTS(
            		SELECT  
            			1 
            		FROM 
            			`like` l
            		JOIN
            			userConnection uc ON l.userKey = uc.userKey
            		WHERE 
            			l.postKey = post.postKey 
            			AND uc.sessionId = #{sessionId}
            	) THEN TRUE
            	ELSE FALSE
        	END AS isLike,
        	
			CASE
				WHEN EXISTS(
					SELECT
						1
					FROM
						`userConnection` uc
					WHERE
						uc.userKey = post.userKey
						AND uc.sessionId = #{sessionId}

				) THEN TRUE
				ELSE FALSE
				END AS myPost

		FROM 
			post 
		LEFT JOIN
			<!-- channel 테이블에 channelKey값이 일치하는 행을 결과에 추가해준다  -->
			channel ON post.channelKey = channel.channelKey
		LEFT JOIN
			<!-- 서브쿼리 : 게시글 좋아요 숫자를 뽑기위해 필요-->
			<!-- like 테이블에서 postKey 를 선택하고 postKey의 갯수를 세는 기능. 결과는 postKey별로 그룹화해서 각 post에 대한 좋아요 갯수를 반환함-->
			<!-- 서브쿼리로 그룹화 시킨 값중 같은 postKey를 가진 행을 결과에 추가해준다 -->
			(SELECT
				`like`.postKey,
				COUNT(`like`.likeKey) AS likeCount
			FROM
				`like`
			GROUP BY
				`like`.postKey
			) AS likeSummary ON post.postKey = likeSummary.postKey
		LEFT JOIN
			<!-- user 테이블에 userKey값이 일치하는 행을 결과에 추가해준다  -->
			user ON post.userKey = user.userKey 
		LEFT JOIN
			<!-- 서브쿼리 : 댓글 숫자를 뽑기위해 필요 -->
			<!-- comment 테이블에서 postKey를 선택하고 postKey의 갯수를 세는 기능, 결과는 postKey별로 그룹화해서 각 post에 댓글 갯수를 반환함 -->
			<!-- 서브 쿼리로 그룹화 시킨 값중 같은 postKey를 가진 행을 결과에 추가해준다  -->
        	(SELECT 
        		comment.postKey, 
        		COUNT(DISTINCT comment.commentKey) + IFNULL(SUM(reply.replyKey IS NOT NULL), 0) AS totalCommentCount
     		FROM 
        		comment
     		LEFT JOIN 
        		reply ON comment.commentKey = reply.commentKey
     		GROUP BY 
        		comment.postKey
        ) AS commentSummary ON post.postKey = commentSummary.postKey
		WHERE 
			post.state = 'common'
		ORDER BY
			post.createdAt DESC
		LIMIT	
			#{offset},#{limit}
	</select>

</mapper>